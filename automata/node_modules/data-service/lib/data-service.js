// Initial
// General Packages
var fs = require('fs');
// MySQL Packages
var mysql = require('mysql');
var mysql_connection = new Object();

// MongoDB Package
var mongodb = require('mongodb');
var mongodb_connection = new Object();

// Module
module.exports = {
    JSON2CSV:
    function JSON2CSV(data, callback) {
        var key = Object.keys(data[0]);
        var results = "";
        for (var n=0; n<key.length; n++) {
            if ( n == key.length - 1 ) {
                results += key[n];
            } else {
                results += key[n] + ",";
            }            
        }
        results += "\r\n";
        for (var n=0; n<data.length; n++) {
            for (var i=0; i<key.length; i++) {
                if ( i == key.length - 1 ) {
                    results += data[n][key[i]];
                } else {
                    results += data[n][key[i]] + ",";
                }            
            }
            results += "\r\n";
        }
        callback(results);
    },
    ReadConfig:
    function ReadConfig(config, callback) {
        fs.readFile(config, function(err, data) {
            callback(JSON.parse(data.toString('utf8')));
        }); 
    },
    UpdateConfig:
    function UpdateConfig(config, data, callback) {   
        fs.writeFile(config, JSON.stringify(data), function(err, data) {
            console.log(err);          
        }); 
    },
    Connect:
    function Connect(service, config, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            mysql_connection = mysql.createConnection(config);
            callback({message:"success"});
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            var MongoClient = require('mongodb').MongoClient;
            MongoClient.connect("mongodb://" + config.host + ":" + config.port + "/" + config.database, function(err, db) {
                mongodb_connection = db;
                callback({message:"success"});
            });
        } 
    },
    Create:
    function Create(service, table, id, data, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            mysql_connection.query("INSERT INTO " + mysql.escape(table).replace(/'/g,"") + " SET ? ;", data, function(err, results, fields) {
                if (err) {
                    callback({message:"error",description:err});
                } else {
                    callback(results);
                }
            });
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            mongodb_connection.collection(table).insert(data, function (err, results) {
                if (err) {
                    callback({message:"error",description:err});
                } else {
                    callback(results);
                }
            });
        } 
    },
    Read:
    function Read(service, table, id, data, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            var query = "";
            if (Object.getOwnPropertyNames(id).length === 0) {
                query = "SELECT * FROM " + mysql.escape(table).replace(/'/g,"") + ";";
            } else {
                var condition = "";
                for (var n=0; n<Object.keys(id).length; n++) {
                    condition += Object.keys(id)[n] + " = \"" + mysql.escape(id[Object.keys(id)[n]]).replace(/'/g,"") +"\"";
                    if (n != Object.keys(id).length - 1) {
                        condition += " AND ";
                    }
                }
                query = "SELECT * FROM " + mysql.escape(table).replace(/'/g,"") + " WHERE " + condition + ";";
            }
            mysql_connection.query(query, data, function(err, results, fields) {
                if (err) {
                    callback({message:"error",description:err});
                } else {
                    callback(results);
                }
            });
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            mongodb_connection.collection(table).find(id).toArray(function(err, results) {
                if (err) {
                    callback({message:"error",description:err});
                } else {
                    callback(results);   
                } 
            });
        }
    },
    Update:
    function Update(service, table, id, data, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            mysql_connection.query("UPDATE " + mysql.escape(table).replace(/'/g,"") + " SET ? WHERE " + mysql.escape(id).replace(/'/g,"") + ";", data, function(err, results, fields) {
                callback({message:"error",description:err});
            });
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            delete data._id;
            mongodb_connection.collection(table).update(id,{$set:data}, function (err, results) {
                callback({message:"error",description:err});
            });
        } else if (service.toLowerCase().indexOf("memcached") != -1) {
            memcached_connection.set(table + "_" + id[Object.keys(id)[0]]  ,JSON.stringify(data) , 60000, function(err) {
                callback({message:"error",description:err});
            });
        }
    },
    Delete:
    function Delete(service, table, id, data, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            mysql_connection.query("DELETE FROM " + mysql.escape(table).replace(/'/g,"") + " WHERE " + mysql.escape(id).replace(/'/g,"") + ";", data, function(err, results, fields) {
                callback({message:"error",description:err});
            });
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            mongodb_connection.collection(table).remove(id, function (err, results) {
                callback({message:"error",description:err});
            });
        }
    },
    Destroy:
    function Destroy(service, callback) {
        if (service.toLowerCase().indexOf("mysql") != -1) {
            mysql_connection.destroy();
            callback({message:"success"});
        } else if (service.toLowerCase().indexOf("mongodb") != -1) {
            mongodb_connection.close();
            callback({message:"success"});
        }
    }
}
